#include <iostream>
#include <algorithm>

using namespace std;

class Student{
	public:
		string name;
		int score;
		Student(string name, int score){
			this -> name = name;
			this -> score = score;
		}
		//정렬 기준은 '점수가 작은 순서'
		bool operator<(Student &student){
			return this-> score < student.score;
		} 
}; 

bool compare(int a, int b){
	//오름차순 정렬 
	return a<b;
	//내림차순 정렬
	//return a>b; 
}

int main(void){
	
	Student students[] = {
		Student("이소형",90),
		Student("홍길동",78),
		Student("김나무",87),
		Student("강효정",56)
	};
	sort(students, students+4);
	for(int i=0 ; i<4 ; i++){
		cout << students[i].name << ' ';
	}
	
	int a[10] = {9,3,5,4,1,10,8,6,7,2};
	sort(a,a+10,compare);//a배열의 10개를 정렬하라 (메모리 주소로 이해함) , compare: 정렬 방법 기본 오름차순 
	for(int i=0 ; i<10 ; i++){
		cout << a[i] << ' ';
	}
} 


/* 클래스 없이 구현 */

#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

bool compare(pair<string, pair<int, int> > a,
			pair<string, pair<int, int> > b){
	// 성적이 같다면 나이가 더 어린 친구가 앞으로 가도록 정렬 
	if(a.second.first == b.second.first){
		return a.second.second > b.second.second;
	}else {
		return a.second.first > b.second.first;
	}
}

//클래스를 사용하지 않고 정렬하기. 
int main(void){
	vector<pair<string,pair<int,int> > > v;
	
	v.push_back(pair<string,pair<int,int> >("이소형", pair<int,int>(90,19931231)));
	v.push_back(pair<string,pair<int,int> >("이소나", pair<int,int>(70,19920130)));
	v.push_back(pair<string,pair<int,int> >("이소라", pair<int,int>(90,19930621)));
	v.push_back(pair<string,pair<int,int> >("이소가", pair<int,int>(80,19961105)));
	v.push_back(pair<string,pair<int,int> >("이소다", pair<int,int>(60,19940819)));
	
	sort(v.begin(), v.end(), compare);
	for(int i=0 ; i<v.size(); i++){
		cout << v[i].first << ' ';
	}
	
	return 0;
}
